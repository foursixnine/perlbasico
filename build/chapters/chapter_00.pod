=encoding utf8

=head0 Introducción

=head1 Sobre Perl    

Z<Sobre Perl> 

Perl tiene unos 23 años hasta ahora. El lenguaje ha evolucionado desde una
herramienta simple para la administración de sistemas tomando cosas de shell
scripting y C (Perl 1) hasta convertirse en un poderoso lenguaje de propósito
general (Perl 5), consistente, coherente, cambiando el paradigma de
programación en general con la intensión de mantenerse por otros 25 años. (Perl
6) 

Aun así, la mayoría de los programas en el mundo, escritos en Perl 5,
aprovechan muy poco las características del lenguaje. Usted C<puede> escribir
programas en Perl 5 como si estuviera en Perl 4 (o Perl 3 o 2 o 1), pero los
programas que aprovechan todo el increíble poder del mundo de Perl 5 que la
comunidad ha inventado, y mejorado, son mas cortos, rápidos, mas poderosos, y
fáciles de mantener que sus alternativas en anteriores versiones. 

=head1 ¿ Porque Larry creo Perl ?

Z<¿ Porque Larry creo Perl ?> 

Larry crea Perl a mediados de 1980,  cuando intentaba producir reportes sobre 
la información ordenada jerárquicamente en archivos de  la red de noticias 
USENET para un sistema de reporte de bugs,  y awk no dio la talla. Entonces
Larry, como buen programador perezoso que es,  decide hacer una herramienta que
pueda usar para resolver este problema y que pueda volver a usar para otro
problema similar en otro lugar,  en otro tiempo. 

=head1 ¿ Porque Larry simplemente no uso otro lenguaje ?    

Z<¿ Porque Larry simplemente no uso otro lenguaje ?> 

En este momento hay gran variedad de lenguajes, pero en esa época Larry no
encontró un lenguaje que se adaptara a sus necesidades. 

Si uno de los lenguajes de hoy, hubiese existido para la época,  pues tal vez
Larry lo hubiera usado para resolver el problema. 

Necesitaba algo con la rapidez de codificación disponible en B<Shell> o B<AWK>
y con algo del poder de las herramientas como B<grep>, B<cut>, B<sort>, y
B<sed>,  sin tener que recurrir a un lenguaje como B<C>.

Perl, intenta llenar la brecha entre los lenguajes de bajo nivel como C, C++, y
Assembler,  y los lenguajes de alto nivel de la época como Shell Scripting. La
programación a bajo nivel, usualmente es difícil y fea de escribir, pero rápida
y sin limitaciones, es difícil superar la velocidad de un programa bien escrito
a bajo nivel en una máquina dada. Y no hay mucho que se pueda hacer. 

En el otro extremo, la programación convencional de alto nivel, tiende a ser
lenta,  dura, fea y limitada. Hay varias cosas que no puedes hacer con
programación en shell o batch. 

Perl es fácil, casi ilimitado, muy rápido y solo un poco feo.

=head2 Características principales de Perl    

Z<Caracteristicas principales de Perl> 

=head3 Perl es fácil    

Z<Perl es fácil> 

Cuando nos referimos que Perl es fácil, hablamos de que es fácil de usar, no es
especialmente fácil de aprender. Si usted conduce un carro, que paso semanas o
meses aprendiendo a conducir, entonces luego va a ser fácil de conducir. De
igual manera cuando pase la misma o mas cantidad de horas aprendiendo Perl,
entonces despues va a ser muy fácil de usar.  

=head3 Perl es casí ilimitado

Z<Perl es casí ilimitado> 

Hay muy pocas cosas que no podrás hacer con Perl. Seguramente usted no deseará
escribir un controlador de algún dispositivo de interrupción a nivel de
micro-kernel (A pesar de que ya alguien hizo esto). Pero la mayoria de las
cosas que la gente común y no tan común necesita,  la mayoria del tiempo son
buenas tareas para Perl, desde scripts muy pequeños, hasta aplicaciones de
nivel industrial. 


=head1 Sobre los ejercicios y sus respuestas

Los ejercicios se encuentran al final de cada capítulo,  una vez que se
desarrolle cada capítulo,  se tomaran 45 a 50 minutos para resolver los
ejercicios correspondientes a cada capítulo. 

=head1  
