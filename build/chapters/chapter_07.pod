=head0 Trabajando con Expresiones Regulares

En el capítulo anterior vimos un poco del mundo de las expresiones regulares.
Ahora en este capítulo veremos como usarlas en Perl. 

=head1 Usando el operador m//

Ya habíamos escrito patrones entre un par de barras, como C</fred/>.
Actualmente esto es un atajo para el operador C<m//> (pattern match). Seguro
recuerda que con el operador C<qw//> podías escoger un par de delimitadores
para entrecomillar el contenido. Aquí ocurre lo mismo, puedes escribir las
mismas expresiones como C<m(fred)>, C<<m<fred>>>, C<m{fred}>, o C<m[fred]>
o también podría usar los siguientes delimitadores: C<m,fred,>, C<m!fred!>,
C<m^fred^>. 

Como ya debe saberlo, puede omitir la C<m>, pero si lo hace, debe elegir las
barras como delimitadores para la expresión regular. 

Por su puesto, usted debería escoger un delimitador que no este contenido en la
expresión regular. Si quiere hacer un patrón que haga match con el principio de
una URL para la web, podría usar C</http:\/\//> para evaluar C<"http://">.
Ahora, seria mas fácil de leer, escribir y mantener, si cambiara el delimitador
por : C<m%http://%>. 

=head2 Modificadores    

Z<Modificadores> 

Existen varios modificadores del comportamiento por defecto del operador
C<m//>, estos modificadores son letras que se pueden agregar al final de la
expresión regular como un grupo de modificadores. 


=head3 Evaluación no sensible a mayúsculas y minúsculas con /i    

Z<Evaluación sensible a mayúsculas y minúsculas> 

Para escribir un patrón que no sea sensible a mayúsculas y minúsculas, 
en el que puedas evaluar C<FRED> de la misma forma que evaluar C<fred> o
C<Fred>, utilice el modificador C</i>.

=begin programlisting

    print "Would you like to play a game? "; 
    chomp($_ = <STDIN>); 
    if (/yes/i) { # case-insensitive match
        print "In that case, I recommend that you go bowling.\n";
    }
    

=end programlisting

=head3 Evaluar cualquier caracter con /s    

Z<Evaluar cualquier caracter con /s> 

Por defecto, el operador punt (C<.>) no hace match con el caracter de nueva
linea, y esto tiene sentido cuando tenemos que mirar dentro de una sola linea.
Si quiere evaluar caracteres de nueva linea puede usar el modificador C</s>.
Esto causa que el operador punto (C<.>) se comporte como la clase de
caracteres C<[\d\D]>.  

=begin programlisting

    $_ = "I saw Barney\ndown at the bowling alley\nwith Fred\nlast night.\n";
    if (/Barney.*Fred/s) {
        print "That string mentions Fred after Barney!\n";
    }

=end programlisting

Sin el modificador C</s>, la evaluación falla. 

=head3 Agregando espacios al patrón con /x    

Z<Agregando espacios al patrón con /x> 

Este modificador, le va a permitir agregar espacios en blanco en el patrón,
para que sea más fácil de leer. 

=begin programlisting

    /-?\d+\.?\d*/           # ¿ Que esta haciendo esto ? 
    / -? \d+ \.? \d* /x     # Un poco mas fácil de entender (aunque no para mi)

=end programlisting

Los espacios literales y los tabs son ignorados. Puede usar \t o \s para
referirse a espacios o a tabs. 

Recuerde que en Perl, puede colocar comentarios como parte de los espacios en
blanco. Ahora podemos colocar comentarios en una expresión regular para indicar
que es exactamente lo que esta haciendo. 

=begin programlisting

    /
        -?      # Un signo menos opcional 
        \d+     # Uno o mas dígitos antes del punto decimal
        \.?     # Un punto decimal opcional
        \d*     # Dígitos opcionales después del punto decimal
    /x          # Fin del patrón 

=end programlisting

Tenga cuidado de no colocar los signos delimitadores en los comentarios, esto
va a terminar prematuramente el patrón. 

=head3 Combinar los modificadores    

Z<Combinar los modificadores> 

Si tiene mas de un modificador, puede usarlos uno tras el otro (el orden no
importa): 

=begin programlisting

    if (/barney.*fred/is){  
        print "La cadena menciona a Fred después de Barney \n";
    }

=end programlisting

O podría escribir el patrón con comentarios.

=begin programlisting

    if (
        m{
            barney      # un hombre pequeño. 
            .*          # Algo en el medio.
            fred        # Un hombre fuerte. 
        }six            # /s /i /x
    ){
        print "La cadena menciona a Fred después de Barney \n";
    }

=end programlisting


=head1 Anclajes    

Z<Anclajes> 

Por defecto, si en un patron no hace match al inicio de la cadena, este puede
"flotar" hasta el final de la cadena, intentando hacer match en algún lado.
Existe un conjunto de anclajes que puede utilizarse para mantener al patron
anclado a un punto de la cadena. 

El acento circunflejo (B<^>) marca el principio de la cadena, mientras que el
signo dolar (B<$>) marca el final de la cadena N<Actualmente hace match con el
final de la cadena, o con un salto de linea al final de la cadena, entonces va
a hacer match con C<fred> o con C<fred\n> de igual manera.>. 

Entonces, el patrón C</^fred/> va a hacer match con C<fred> solo si se
encuentra al principio de la cadena. Y el patrón C</rock$/> va a hacer match de
C<rock> solo al final de la cadena. 

=head1 Anclaje de palabras    

Z<Anclaje de palabras> 

El ancla de palabras (C<\b>) determina el fin de una palabra. Entonces puede
usar C</\bfred\b/> para hacer match de la palabra C<fred> pero no de
C<frederick> o C<alfred> o C<manfred>. 

El ancla C<\b> hace match de el inicio y final de un grupo de caracteres C<\w>

Las palabras en Perl, son una secuencia de letras, dígitos y pisos bajos, esto
es, una palabra en este sentido es cualquier cosa que haga match con C</\w+/>. 

El ancla para todo lo que no sea una palabra es C<\B>; esto hace match de
cualquier cosa que C<\b> no haga match. Entonces, el patrón C</\bsearch\B/> va
a hacer match de C<searches>, C<searching> y C<searched>, pero no de C<search>
o C<researching>.

=head1 El operador =~    

Z<El operador =~> 

Por defecto se evalúa lo que esta en la variable C<$_>, este operador le dice a
Perl que evalúe lo que esta contenido en la variable a la izquierda del
operador. Por ejemplo: 

=begin programlisting

    my $alguna_cosa = "I dream of betty rubble.";
    if ($alguna_cosa =~ /\brub/){
        print "Match";
    }

=end programlisting

En el siguiente ejemplo (algo inusual), C<$likes_perl> obtiene un valor boleano
de acuerdo con lo que el usuario escribe en el prompt. Este es un ejemplo tiene un
lado rápido y sucio, debido a que el valor de la entrada del usuario se
descarta por completo. Este código lee la entrada, evalúa la cadena contra el
patrón,  y descarta el valor de la linea de entrada. 

=begin programlisting

    print "¿ Te gusta Perl ?"; 
    my $likes_perl = (<STDIN> =~ /(\bsi\b)|(\byes\b)/i);
    # .... time pass ...
    if ($likes_perl){
        print "Usted ha dicho que le gusta Perl, entonces ....\n";
    
    }

=end programlisting


=head1 Interpolación en Patrones    

Z<Interpolación en Patrones> 

Una expresión regular es una interpolación en comillas dobles, como si se
tratara de una cadena entre comillas dobles. Esto permite que usted escriba un
programa parecido a C<grep>: 

=begin programlisting

    #!/usr/bin/perl -w 
    my #what = "larry";

    while (<>){
        if (/^($what)/){ 
            print "Se ha dicho $what al principio de $_\n"; 
        }
    }

=end programlisting

No es necesario definir C<$what> con una cadena literal; podemos leer el valor
desde los argumentos de la linea de comandos con C<@ARGV> 

=begin programlisting

    my $what = shift @ARGV;

=end programlisting

=head1 Recuerdos de una Expresión Regular

Z<Recuerdos de una Expresión Regular>

En una nueva ciudad que no conocemos, caminamos por la calle, prestando
atención a algunos detalles, que luego se convierten en recuerdos, que ademas
podemos usar para hacer match de una dirección en el futuro. 

De la misma forma, las expresiones regulares tienen recuerdos, cuando usamos
paréntesis para la creación de grupos en una expresión regular, se crean
espacios de memoria al vuelo que recuerdan a la cadena que hizo match en ese
grupo. 

Como estos recuerdos contienen cadenas, son variables escalares. En Perl, estas
variables tienen nombres especiales como C<$1> y C<$2>. Estas son las variables
correspondientes a los grupos creados con paréntesis en la expresión regular.
Como es de esperarse,  C<$4> contiene la cadena que hizo match en el cuarto
grupo de paréntesis. Por ejemplo: 

=begin programlisting

    $_ = "Adios Mundo, Cruel";
    if (/\s(\w+),/){     # Memoriza la palabra entre espacio y coma
        print "la palabra fue: $1\n";   # La palabra fue Adios
    }

=end programlisting

También puede usar mas de un recuerdo.

=begin programlisting

    $_ = "Corre que nos cogen, frodo!";
    if (/(\S+) (\S+) (\S+) (\S+), (\S+)!/){
        print "Las palabras fueron: $1 $2 $3 $4 $5\n";
    }

=end programlisting

Es importante resaltar, que estas variables pueden estar vacías, miremos el
siguiente ejemplo: 

=begin programlisting

    my $dino = "I fear that I'll be extinct after 1000 years.";
    if ($dino =~ /(\d*) years/) {
        print "That said '$1' years.\n"; # 1000
    }

    my $dino = "I fear that I'll be extinct after a few million years";
    if ($dino =~ /(\d*) years/) {
        print "That said '$1' years.\n"; # 1000
    }

=end programlisting

=head2 Paréntesis que no recuerdan    

Z<Paréntesis que no recuerdan> 

Ya se sabe que al usar paréntesis para agrupar, automáticamente creamos
recuerdos que pueden usarse en variables escalares del tipo C<$1>, C<$2>.
Ahora, supongamos que usted quiere agrupar pero no recordar. Considere el 
siguiente ejemplo: 

=begin programlisting
    
    $_= "brontosaurus burguer";
    if (/(bronto)?saurus (steak|burguer)/){
        print "Fred wants a $2\n";
    }

=end programlisting

El valor que necesitamos para este ejemplo, esta contenido en la variable
C<$1>, en expresiones mas complicadas, esta situación puede ser confusa. 

Afortunadamente, las expresiones regulares en Perl, tienen una forma de
decirles a los grupos de paréntesis que no recuerden nada. A estos paréntesis
los llamamos I<Paréntesis que no recuerdan>, y los escribimos con una secuencia
de caracteres especial. Agregando un signo de interrogación cerrando y dos
puntos al paréntesis que abre, le dice a Perl que use este paréntesis solo para
agrupar. 

=begin programlisting

    
    if (/(?:bronto)?saurus (steak|burguer)/){
        print "Fred wants a $1\n";
    }

=end programlisting


Las expresiones regulares en Perl, tienen otras secuencias de paréntesis
especiales que hacen cosas interesantes y complicadas como mirar-desde-arriba,
mirar-desde-atrás, e incluso ejecutar código en medio del patrón. Si lo desea,
puede mirar en el manual C<perlre> para saber mas. 


=head2 Nombres para los recuerdos    

Z<Nombres para los recuerdos> 

Perl 5.10 nos permite darle nombres a los recuerdos de una expresión
regular. Los recuerdos se guardan en el hash llamado C<%+>, la llave es la
etiqueta que usamos y el valor es la parte de la cadena que hizo match. Para
darle nombre a un recuerdo, usamos C<<(?<ETIQUETA>PATRON)>> donde reemplazamos
C<ETIQUETA> por el nombre que quisiéramos darle. En el siguiente ejemplo vamos
a etiquetar la primera captura como C<name1> y la segunda como C<name2>, y
luego vamos a usar C<$+{name1}> y C<$+{name2}> para buscar sus respectivos
valores.

=begin programlisting

    use 5.010;

    my $names = 'Fred or Barney';

    if ( $names =~ m/(?<name1>\w+) (?:and|or) (?<name2>\w+)/){
        say "I saw $+{name1} and $+{name2}";
    }

=end programlisting

Deberíamos ver el siguiente mensaje 

=begin screen

    I saw Fred and Barney 

=end screen

Al colocarle etiquetas a nuestras capturas, no nos importa el orden, podemos
agregar mas capturas, moverlas de sitio y esto no va a afectar en absoluto
nuestro código.

=begin programlisting

    use 5.010;

    my $names = 'Fred or Barney';

    if ( $names =~ m/(?<name2>\w+) (?:and|or) (?<name1>\w+)/){
        say "I saw $+{name1} and $+{name2}";
    }

=end programlisting

Note que al tener una forma de etiquetar las capturas, necesitamos una forma de
usarlas como puntos de referencia. Anteriormente usamos C<\1> o C<\g{1}> para
esto. Con un grupo etiquetado, podemos usar la etiqueta en C<\g{etiqueta}>. Por
ejemplo: 


=begin programlisting

    use 5.010;
    
    my $names = 'Fred Flinstone and Wilma Flinstone';
    
    if ( $names =~ m/(?<last_name>)\w+) and \w+ \g{last_name}/ ){
        say "I saw $+{last_name}";
    }

=end programlisting

Podemos hacer lo mismo, pero con otra sintaxis. En lugar de usar
C<\g{etiqueta}>, podemos usar C<\k{etiqueta}>

=begin programlisting

    use 5.010;

    my $names = 'Fred Flinstone and Wilma Flinstone';

    if ( $names =~ m/(?<last_name>\w+) and \w+ \k<last_name>/ ){
        say "I saw $+{last_name}";
    }

=end programlisting

=head2 Variables Automáticas    

Z<Variables Automáticas> 

Existen tres variables especiales que puede usar libremente, sin importar que
sea un grupo de paréntesis o no. Esta es la buena noticia, la mala noticia, es
que estas variables tienen nombres un poco raros.

Ahora, probablemente Larry, habría sido feliz al utilizar nombres un poco menos
raros para estas variables, como $gazoo o $ozmodiar. Pero estas son nombres de
variables que podrían estar en su código. Para evitar que los programadores de
Perl tuvieran que aprenderse todos los nombres de las variables especiales de
Perl antes de escoger nombres para sus variables, Larry le dio nombres extraños
a las variables internas de Perl, nombres que incluso rompen las reglas para
nombrar variables. En este caso, los nombres de estas variables son los signos
de puntuación C<$&>, C<$`>, y C<$'>. Si, son extraños, feos y raros, pero esos
son sus nombres. La parte de la cadena que hace match, es automáticamente
almacenada en la variable C<$&>: 

=begin programlisting

    if ("Hello there, neighbor" =~ /\s(\w+),/){
        print "Lo que actualmente hizo match es: '$&'. \n";
    }

=end programlisting

Lo que sea que se encuentre antes de la sección que hizo match esta en C<$`>,
y lo que sea que este después esta en C<$'>. 

Si utiliza estas tres variables en orden, va a obtener la cadena original.

=begin programlisting

    if ("Hello there, neighbor" =~ /\s(\w+),/){
        print "That was ($`)($&)($').\n";
    } 

=end programlisting

Ahora en un principio mencionamos que estas tres variables podía usarlas
libremente. Bueno, la libertad tiene un precio. En este caso, el precio es que
una vez que hallas usado cualquiera de estas variables automáticas en algún
lugar del programa, las otras expresiones regulares van a ser un poco mas
lentas. Ahora, este retardo no es muy grande, pero si lo suficiente como para
que algunos programadores de Perl simplemente nunca usen estas variables
automáticas.


=head1 Cuantificadores Generales    

Z<Cuantificadores Generales> 

Un cuantificador en un patrón indica la repetición de un item un determinado
número de veces. Ya vimos tres cuantificadores: C<*>, C<+>, y C<?>. Pero
tambien puede usar un par de números separados por coma encerrados entre llaves
(C<{}>) para especificar exactamente de que manera y cuantas repeticiones son 
permitidas. 

Entonces el patrón C</a{5,15}/> va a hacer match desde 5 hasta 15 repeticiones
de la letra C<a>. Si aparece repetida tres veces, no hace match. Si aparece
cinco veces, esto hace match. Si aparece 20 veces, para las primeras 15 va a
hacer match.

Si omite el segundo número, pero deja la coma, no hay limite superior. 

Si omite también la coma, el número dado, es exactamente la cuenta permitida. 

=head1 Un programa que prueba patrones    

Z<Un programa que prueba patrones> 

Este programa es útil para probar patrones en algunas cadenas, y ver donde hace
match y donde no: 

=begin programlisting

    #!/usr/bin/perl
    
    while (<>) {
        chomp;
    
        if (/YOUR_PATTERN_GOES_HERE/) {
    	    print "Matched: |$`<$&>$'|\n";
        } else {
    	    print "No match: |$_|\n";
        }
    
    }

=end programlisting


=head1 Presedencia    

Z<Presedencia> 

La tabla de presedencia de las expresiones regulares es pequeña, en comparación
con la tabla de presedencias de Perl. 


=begin screen

    Expresión                               Ejemplo
    ----------------------------------------------------------
    
    Paréntesis (agrupación o recuerdos)     (), (?:...), (?<LABEL>..) 
    Cuantificadores                         a* a+ a? a{n, m}
    Anclas y secuencias                     abc ^a a$ 
    Alternación                             a|b|c 
    Átomos                                  a [abc] \d \1 

=end screen


=head1 Ejercicios    

Z<ejercicios07> 

=over 

=item 1. Utilizando el programa para probar patrones, escriba un patron que haga
match de la cadena C<match>. Pruebe el programa con la cadena
C<beforematchafter>. Haga que la salida muestre las tres partes del match en el
orden correcto. 

=item 2. Utilizando el programa para probar patrones, escriba un patron que haga
match si cualquier palabra (en el sentido de las palabras \w) termina con una
letra C<a>. Esto hace match de C<wilma> pero no de C<barney>. 

=item 3. Modifique el programa de el ejercicio anterior de manera que la
palabra que termine con la letra C<a>, se almacene en C<$1>. Arregle el código
para imprimir el contenido de las variables, algo como: C<$1> contiene
C<'Willma'>

=item 4. Modifique el programa anterior, para que utilice nombres en las
capturas en lugar de usar C<$1>. Actualice el código que muestra el contenido
de las variables.

=back

