=encoding utf8

=head0 Aspectos esenciales de Perl

=head1 Introducción

Perl tiene unos 23 años hasta ahora. El lenguaje ha evolucionado desde una
herramienta simple para la administración de sistemas tomando cosas de shell
scripting y C (Perl 1) hasta convertirse en un poderoso lenguaje de propósito
general (Perl 5), consistente, coherente, cambiando el paradigma de
programación en general con la intensión de mantenerse por otros 25 años. (Perl
6) 

Aun así, la mayoría de los programas en el mundo, escritos en Perl 5,
aprovechan muy poco las características del lenguaje. Usted C<puede> escribir
programas en Perl 5 como si estuviera en Perl 4 (o Perl 3 o 2 o 1), pero los
programas que aprovechan todo el increíble poder del mundo de Perl 5 que la
comunidad ha inventado, y mejorado, son mas cortos, rápidos, mas poderosos, y
fáciles de mantener que sus alternativas en anteriores versiones. 

=head1 Instalando Perl

=begin sidebar

Normalmente los sistemas operativos tipo Unix, se distribuyen con una versión
de Perl. Si usted desea tener una versión en específico de Perl, entonces le
sugerimos el uso de PerlBrew.

A continuación, se indica como instalar Perl en una máquina con Debian Lenny. 

=begin programlisting

    aptitude install perl

=end programlisting


=head1 Detalles de la instalación de Perl.
Z<Detalles de la instalación de Perl.>
X<instalación>

Cuando un supervisor requiera información acerca de cuales modificaciones del
compilador se aplicaron a la versión de Perl instalada originalmente, con el
fin de estar seguro de que los cambios que han sido realizados son coherentes,
usamos el siguiente comando:

=begin screen 

    $ perl -V
    Summary of my perl5 (revision 5 version 10 subversion 1) configuration:
   
    Platform:
    osname=linux, osvers=2.6.32.25-dsa-ia32, archname=i486-linux-gnu-thread-multi
    uname='linux murphy 2.6.32.25-dsa-ia32 #1 smp fri oct 29 10:49:58 cest 2010 i686 gnulinux '
    config_args='-Dusethreads -Duselargefiles -Dccflags=-DDEBIAN -Dcccdlflags=-fPIC -Darchname=i486-linux-gnu -Dprefix=/usr -Dprivlib=/usr/share/perl/5.10 -Darchlib=/usr/lib/perl/5.10 -Dvendorprefix=/usr -Dvendorlib=/usr/share/perl5 -Dvendorarch=/usr/lib/perl5 -Dsiteprefix=/usr/local -Dsitelib=/usr/local/share/perl/5.10.1 -Dsitearch=/usr/local/lib/perl/5.10.1 -Dman1dir=/usr/share/man/man1 -Dman3dir=/usr/share/man/man3 -Dsiteman1dir=/usr/local/man/man1 -Dsiteman3dir=/usr/local/man/man3 -Dman1ext=1 -Dman3ext=3perl -Dpager=/usr/bin/sensible-pager -Uafs -Ud_csh -Ud_ualarm -Uusesfio -Uusenm -DDEBUGGING=-g -Doptimize=-O2 -Duseshrplib -Dlibperl=libperl.so.5.10.1 -Dd_dosuid -des'
    hint=recommended, useposix=true, d_sigaction=define
    useithreads=define, usemultiplicity=define
    useperlio=define, d_sfio=undef, uselargefiles=define, usesocks=undef
    use64bitint=undef, use64bitall=undef, uselongdouble=undef
    usemymalloc=n, bincompat5005=undef
    Compiler:
    cc='cc', ccflags ='-D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64',
    optimize='-O2 -g',
    cppflags='-D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include'
    ccversion='', gccversion='4.4.5', gccosandvers=''
    intsize=4, longsize=4, ptrsize=4, doublesize=8, byteorder=1234
    d_longlong=define, longlongsize=8, d_longdbl=define, longdblsize=12
    ivtype='long', ivsize=4, nvtype='double', nvsize=8, Off_t='off_t', lseeksize=8
    alignbytes=4, prototype=define
    Linker and Libraries:
    ld='cc', ldflags =' -fstack-protector -L/usr/local/lib'
    libpth=/usr/local/lib /lib /usr/lib /usr/lib64
    libs=-lgdbm -lgdbm_compat -ldb -ldl -lm -lpthread -lc -lcrypt
    perllibs=-ldl -lm -lpthread -lc -lcrypt
    libc=/lib/libc-2.11.2.so, so=so, useshrplib=true, libperl=libperl.so.5.10.1
    gnulibc_version='2.11.2'
    Dynamic Linking:
    dlsrc=dl_dlopen.xs, dlext=so, d_dlsymun=undef, ccdlflags='-Wl,-E'
    cccdlflags='-fPIC', lddlflags='-shared -O2 -g -L/usr/local/lib -fstack-protector'


    Characteristics of this binary (from libperl): 
    Compile-time options: MULTIPLICITY PERL_DONT_CREATE_GVSV
                        PERL_IMPLICIT_CONTEXT PERL_MALLOC_WRAP USE_ITHREADS
                        USE_LARGE_FILES USE_PERLIO USE_REENTRANT_API
    Locally applied patches:
        DEBPKG:debian/arm_thread_stress_timeout - http://bugs.debian.org/501970 Raise the timeout of ext/threads/shared/t/stress.t to accommodate slower build hosts
        DEBPKG:debian/cpan_config_path - Set location of CPAN::Config to /etc/perl as /usr may not be writable.
        DEBPKG:debian/cpan_definstalldirs - Provide a sensible INSTALLDIRS default for modules installed from CPAN.

  Built under linux
  Compiled at Nov  2 2010 09:24:47
  @INC:
    /etc/perl
    /usr/local/lib/perl/5.10.1
    /usr/local/share/perl/5.10.1
    /usr/lib/perl5
    /usr/share/perl5
    /usr/lib/perl/5.10
    /usr/share/perl/5.10
    /usr/local/lib/site_perl

=end screen

=begin sidebar

Se puede encontrar una gran cantidad de información acerca de cómo su copia de
Perl fue construida mediante el modificador -V. Por ejemplo, el último elemento
en el código anterior muestra las entradas actuales en la matriz C<@INC>, que
especifica la ruta a los módulos de Perl.

=end sidebar


=head1 Escribiendo Código: Creando archivos de código. 
Z<Escribiendo Código: Creando archivos de código>

Los Scripts en Perl son sólo archivos de texto simple, compuestos por los
estados y las declaraciones del lenguaje, según sea necesario (Se debe declarar
en formato único y subrutinas en Perl). Para crear un script en Perl, usted
debe tener un editor o procesador de texto que le permita guardar archivos en
formato de texto plano.

Guardar en formato de texto simple es un logro que va más allá de muchos
procesadores de palabras. Es posible que tenga problemas con los procesadores
de palabras como Open Office, por ejemplo, aunque se pueden guardar archivos de
texto sin formato con el programa mediante el menu Archivo|Guardar como. La
regla general es que si usted puede abrir el archivo usando la línea de
comandos y no ve ningún carácter extraño, es un archivo de texto plano.  En
Unix, usted tiene muchos editores para elegir. La prueba real, por supuesto, es
si Perl puede leer e interpretar la secuencia de comandos que usted escribió.

Tenga en cuenta que una gran diferencia entre los archivos de texto de Unix y
MS-DOS/Windows, es que los archivos de Unix utilizan un carácter único al final
de cada línea, y los archivos MS-DOS/Windows utilizar dos (es decir, un retorno
de carro y una línea de alimentación). Esta diferencia no preocupa en Perl, por
lo que puede moverse entre las secuencias de comandos de los sistemas
operativos con libertad, sin embargo, esta diferencia podría molestar al editor
que se utilice para trabajar con las secuencias de comandos.

Las extensiones de los archivos puede ser útiles cuando usted vuelva a revisar
largas listas de archivos guardados dentro de tres o mas años y se preguntan
qué tipo de extensión son. Por esta razón, vamos a utilizar la extensión .pl
para los scripts en este curso. Sólo debe tener en cuenta que no tiene que usar
esta extensión o cualquier otra para que los programas funcionen.
Esencialmente, usted es deberá nombrar los ejemplos desarrollados en este curso
según las indicaciones del instructor.

=head1 Escribiendo Código: Declaraciones.
Z<Escribiendo Código: Declaraciones>

¿Cuál es la menor secuencia de comandos legal que puede escribir? 

Si no le importa, la secuencia de comandos no hace nada en absoluto, en
realidad se puede pasar el intérprete Perl en un archivo de longitud cero, y
este no se quejará. (Tenga en cuenta que esto depende de su interprete de Perl,
y su sistema operativo puede no ser compatible con archivos de longitud cero).

Probablemente la secuencia más corta de comandos legales para Perl que se puede
escribir para hacer algo, aunque no mucho, es la siguiente:

=begin screen

 1

=end screen

Este script solo devuelve un valor de 1, y es una linea que verá en los módulos
de Perl y sirve para indicar la carga con éxito del módulo.

En general, el código en Perl se compone de estados y declaraciones. Las
declaraciones son necesarias sólo para los formatos y subrutinas, aunque
también se pueden declara otros elementos tales como las variables, estas las
veremos en un capítulo mas adelante. 

Las declaraciones vienen en dos formas: simples y compuestas. 

=head2 Declaraciones simples

Una declaración simple es una expresión que realiza alguna acción específica.
En el código, una declaración simple termina con un punto y coma B<;> como el
siguiente, en donde se utiliza la función de impresión para mostrar la cadena
B<Hola!>, seguido por el carácter de nueva linea B<\n> utilizado para saltar a
la linea siguiente.

=begin programlisting

    print "Hola! \n";

=end programlisting  

=head2 Declaraciones compuestas

Las sentencias compuestas están formadas de expresiones y bloques. Los bloques
están delimitados con llaves en Perl, B<{ y }>, y puede escribir varias
instrucciones simples. Los bloques también tienen su propio ámbito (el ámbito
de acción de los elementos como una variable indican en qué parte del programa
se pueden utilizar estas variables). No se debe colocar punto y coma después de
la llave de cierre. En el siguiente ejemplo se utiliza un bloque para crear un
compuesto para la sentencia de ciclo repetitivo, que es el más básico de los
ciclos repetitivos en Perl.

=begin programlisting

    for ($loop_index = 1; $loop_index <=5; $loop_index++) {
        print "Hello";
        print "there!\n";
    }    

=end programlisting  

Si escribe cualquiera de las secuencias de comandos anteriores en un archivo
como por ejemplo prueba.pl, entonces habrá creado un script en Perl.  El
siguiente paso es asegurarse de que puede unir el script y el interprete de
Perl para ejecutar la secuencia de comandos. 

=head1 Escribiendo Código: Encontrando el interprete de Perl. 
Z<Escribiendo Código: Encontrando el interprete de Perl>

Puede asegurarse de que su script en Perl, encuentre el interprete de Perl de
dos formas posibles: explicita e implicita. 

=head2 Econtrar Perl Explícitamente

La manera explicita de que el script encuentre al interprete de Perl, es pasar
el script al interprete de Perl de manera explicita en la linea de comandos,
como se puede ver en el siguiente ejemplo: 

=begin screen

    $ perl prueba.pl

=end screen

El éxito del ejemplo anterior supone, que Perl se ha instalado correctamente en
su máquina, lo que significa que se encuentra en la ruta de comandos correcta. 

Por otro lado, no es necesario que el script se encuentre en el C<PATH>, si lo
desea puede utilizar el modificador B<-S> para hacer que Perl busque el script
en los directorios declarados en el PATH. Esta técnica se usa tipicamente para
emular B<#!> en algunas plataformas en donde no esta soportado. Ejemplo: 

=begin screen

    $ perl -S prueba.pl 

=end screen

=head2 Encontrar Perl Implícitamente

Z<Encontrar Perl Implícitamente>

En lugar de pasar el script al interprete de Perl explicitamente, usted puede
asegurarse que su script es capaz de encontrar el interprete de Perl por el
mismo. Lo que significa que podrá correr el script como un comando mas del
sistema: 

=begin screen

    $ prueba.pl

=end screen

Si usted tiene el nombre del script sin la extensión, puede ejecutar el script
de la siguiente manera: 

=begin screen

    $ prueba

=end screen

El ejemplo anterior parece mas bien un comando del sistema, que es la idea.
También puede pasar argumentos a los scripts de Perl, del mismo modo que a los
comandos del sistema, Ejemplo: 

=begin screen

    $ prueba hola mundo! 

=end screen

Asegurarse que el script puede encontrar el interprete de Perl por el mismo,
depende del sistema operativo. 

En sistemas operativos tipo Unix, se puede indicar en la primera linea del
script la ruta absoluta al interprete de Perl (debe tener en cuenta, que si
invoca explícitamente el interprete de Perl como se indico anteriormente, no
necesita esta linea.). Ejemplo: 

=begin programlisting

    #!/usr/bin/perl

=end programlisting

Si utiliza este enfoque, esta linea, con la sintaxis especial B<#!>, debe ser
la primera linea del script. Esta linea se refiere a la ruta del interprete de
Perl en la mayoría de los sistemas operativos tipo Unix, cabe destacar que
podría estar ubicado en un lugar diferente en la máquina, como
B</usr/local/bin/perl> (tenga en cuenta que en muchas máquinas, las rutas
B</usr/bin/perl> y B</usr/local/bin/perl> están referenciadas a ser la misma
ruta).

Es posible, que para utilizar Perl 5 en algunos sistemas, tenga que usar una
linea parecida a esta: 

=begin programlisting

    #!/usr/bin/perl5

=end programlisting

Tambien le recomendamos que utilice el parámetro B<-w> para asegurarse que Perl
muestre advertencias en caso de encontrarlas al interpretar su código.

=begin programlisting

    #!/usr/bin/perl -w 

=end programlisting

Actualmente, el interprete de Perl chequea su código cuando se carga por
primera vez, de manera que obtendrá advertencias inmediatamente a menos que
cargue el código en un tiempo posterior, que se puede hacer con la sentencia
B<require>.  

Debido a que muchos sistemas operativos basados en Unix, toman en cuenta solo
los primeros 32 carácteres de la linea B<#!>, puede tener problemas si su ruta
de acceso a Perl es muy larga. Ejemplo: 

=begin programlisting

    #!/home/elsanto/Perl/perl5/perl5.10.1/bin/perl5.10.1 

=end programlisting


=head1 Escribiendo Código: Encontrando los módulos de Perl. 

Z<Escribiendo Código: Encontrando los módulos de Perl>

Con los años, Perl se ha extendido con la creación de módulos escritos en Perl,
estos módulos poseen lineas de código preescritas que van desde manejar un
cursor en la plantalla, hasta la creación al vuelo de documentos XHTML. 

Los módulos que vienen oficialmente con Perl reciben el nombre de I<módulos
estándar>. En B<CPAN> puede encontrar hasta la fecha otros 19053 módulos
adicionales.

Si instala los módulos correctamente, Perl los encontrará de forma automátca
cando se incluyan en el código con declaraciones tales como B<use> y
B<require>. 

Las rutas para acceder a los módulos de Perl  se encuentran en la lista
B<@INC>. En el siguiente ejemplo, se muestra el contenido de la lista B<@INC>. 

=begin screen

    $ perl -MData::Dumper -e 'print Dumper @INC'

	$VAR1 = '/Library/Perl/Updates/5.10.0/darwin-thread-multi-2level';
	$VAR2 = '/Library/Perl/Updates/5.10.0';
	$VAR3 = '/System/Library/Perl/5.10.0/darwin-thread-multi-2level';
	$VAR4 = '/System/Library/Perl/5.10.0';
	$VAR5 = '/Library/Perl/5.10.0/darwin-thread-multi-2level';
	$VAR6 = '/Library/Perl/5.10.0';
	$VAR7 = '/Network/Library/Perl/5.10.0/darwin-thread-multi-2level';
	$VAR8 = '/Network/Library/Perl/5.10.0';
	$VAR9 = '/Network/Library/Perl';
	$VAR10 = '/System/Library/Perl/Extras/5.10.0/darwin-thread-multi-2level';
	$VAR11 = '/System/Library/Perl/Extras/5.10.0';
	$VAR12 = '.';

=end screen


=head1 Ejecutando Código: Usando los switches de la linea de comandos. 

Z<Ejecutando Código: Usando los switches de la linea de comandos>

=head1 Ejecutando Código: Usando el switch -w para las alertas. 

Z<Ejecutando Código: Usando el switch -w para las alertas>

=head1 Ejecutando Código: Usando el switch -e para ejecutar código desde la linea de comandos. 

Z<Ejecutando Código: Usando el switch -e para ejecutar código desde la linea de comandos>

=head1 Ejecutando Código: Usando el switch -c para chequear la sintaxis. 

Z<Ejecutando Código: Usando el switch -c para chequear la sintaxis>

=head1 Ejecutando Código: Ejecución Interactiva. 

Z<Ejecutando Código: Ejecución Interactiva>

=head1 Habilidades Básicas: Entrada y Salida de Texto. 

Z<Habilidades Básicas: Entrada y Salida de Texto>

=head1 Habilidades Básicas: Usando la función Print.   

Z<Habilidades Básicas: Usando la función Print>

=head1 Habilidades Básicas: Formateando el Texto.  

Z<Habilidades Básicas: Formateando el Texto>

=head1 Habilidades Básicas: Comentando tu código.  

Z<Habilidades Básicas: Comentando tu código>

=head1 Habilidades Básicas: Lectura de datos de la entrada estándar.

Z<Habilidades Básicas: Lectura de datos de la entrada estándar>
  
=head1 Habilidades Básicas: Uso de la variable por defecto $_. 

Z<Habilidades Básicas: Uso de la variable por defecto $_>

=head1 Habilidades Básicas: Limpieza los datos leídos de la entrada estándar. 

Z<Habilidades Básicas: Limpieza los datos leídos de la entrada estándar>

=head1 Habilidades Básicas: Fundamentos básicos del diseño de programas en Perl. 

Z<Habilidades Básicas: Fundamentos básicos del diseño de programas en Perl>
