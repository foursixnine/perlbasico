=encoding utf8

=head0 Datos Escalares

=head1 Números

Aunque los números y las cadenas con frecuencia se pueden tratar como
escalares, es útil observarlos inicialmente por separado. Vamos a ver primero
los números y luego pasamos a las cadenas. 

=head2 Todos los números internamente tienen el mismo formato    

Z<Todos los números internamente tienen el mismo formato> 

Como vera en los próximos párrafos, se puede especificar tanto números enteros
(como 255 o 2001) y números de coma flotante (números reales con puntos
decimales, como 3.1416 o 1.35 x 1025). Pero internamente, Perl calcula valores
punto flotantes de doble precisión. Esto significa que no hay valores enteros
internamente en Perl. Una constante entera en Perl es tratada como su valor
equivalente en coma flotante. Probablemente no se dará cuenta de la conversión,
deje de buscar las distintas operaciones con enteros (en oposición a las
operaciones de punto flotante), porque simplemente no existen. N<Existe un
pragma llamado Integer, que permite realizar operaciones con enteros en lugar
de punto flotante, pero es otra cosa, y no es de lo que estamos hablando
en este punto>

=head2 Literales de punto flotante    

Z<Literales de punto flotante> 

Un literal es la forma en que un valor se representa en el código fuente en
Perl. Un literal no es el resultado de una operación de calculo o de una
operación de I/O. Es datos escritos directamente en el código fuente. 

Un literal de coma flotante, ya debe serle familiar. Números con y sin punto
flotante también son permitidos (incluyendo el prefijo opcional mas y menos),
y de remate el indicador de notación exponencial E. 

=begin programlisting

    1.25 
    255.000 
    255.0 
    7.25e45 
    −6.5e24
    −12e-24 
    −1.2E-23

=end programlisting

=head2 Literales Enteros    

Z<Literales Enteros> 

Los literales enteros son muy sencillos de expresar, ejemplo: 

=begin programlisting

    0
    2001
    -40
    42
    469
    61298040283768

=end programlisting

El último número es un poco difícil de leer, Perl permite underscores para
mayor claridad con los literales enteros,  de modo que puede escribir ese
último número de la siguiente manera: 

=begin programlisting

    61_298_040_283_768

=end programlisting

Este es el mismo número, solo que se ve un poco diferente para nosotros, los
humanos. Podría pensar que se deberían usar comas en lugar de esto, pero las
comas ya tienen un propósito mas importante en Perl. 


=head2 Literales enteros no decimales

Z<Literales enteros no decimales> 

Como en otros lenguajes de programación Perl permite especificar números que no
son de base 10 (decimal). Literales de base 8 (Octal) deben comenzar con un 0,
los literales de base 16 (Hexadecimal) deben comenzar con 0x y los literales
binarios (base 2) deben comenzar con 0b.* Los dígitos hexadecimales de la A
hasta la F,  representan los valores de los dígitos convencionales del 10 al
15.

=begin programlisting

    0377	# 377 octal, same as 255 decimal
    0xff	# FF hex, also 255 decimal
    0b11111111 # also 255 decimal

=end programlisting

Estos tres números, son la misma cosa para Perl, aunque para nosotros,  los
humanos tengan un aspecto diferente. No hay ninguna diferencia con respecto a
Perl en escribir  255.000 o 0xFF. Así que elija la representación que tenga mas
sentido para usted. 

=head2 Operadores numéricos    

Z<Operadores numéricos> 

Perl provee operadores típicos de suma,  resta, multiplicación y división.
Ejemplo:

=begin programlisting

    2 + 3	# 2 plus 3, or 5
    5.1 − 2.4 # 5.1 minus 2.4, or 2.7
    3 * 12	# 3 times 12 = 36
    14 / 2	# 14 divided by 2, or 7

=end programlisting

Perl también soporta el operador de módulo (%). El valor de la expresión 10 % 3
es el resto de la división de 10 entre 3,  que es 1. Adicionalmente Perl provee
el valor por potenciación tipo FORTRAN (**) que todos anhelaron en C y
Pascal. El operador esta representado por el doble asterisco (**), entonces
podemos tener 2 ** 3 que es dos elevado a la tercera potencia. N<El resultado
de una operación de módulo cuando uno o mas valores negativos están
involucrados puede variar dependiendo de la implementación de Perl, tenga
cuidado> 

=head1 Strings o Cadenas de Caracteres    

Z<Strings o Cadenas de Caracteres> 

Las cadenas son secuencias de caracteres (como hola). Las cadenas pueden
contener cualquier combinación de los caracteres. La cadena mas corta posible
no tiene caracteres. La cadena mas larga llena toda la memoria, aunque no
podría hacer mucho con esto. 

Una cadena típica, son secuencias de letras, números y signos de puntación
contenidos en el rango ASCII 32 al 126. 

Como los números, las cadenas tienen una representación literal, que es la
forma en que se representa una cadena en un programa en Perl. Los literales de
cadenas vienen en dos formatos diferentes. Cadenas encerradas en comillas
simples y cadenas encerradas en comillas dobles. 

=head2 Cadenas en comillas simples    

Z<Cadenas en comillas simples> 

Las comillas simples, no son parte de la cadena, están allí para que Perl
identifique el principio y el final de la cadena. Cualquier carácter que no sea
una comilla simple o una barra invertida entre las comillas va a estar
representado a si mismo en la cadena. Ejemplo: 

=begin programlisting

    'fred'	    # those four characters: f, r, e, and d
    'barney'    # those six characters
    ''	        # the null string (no characters)
    'Esto\'D evita que el apostrofe rompa la cadena'
    'El último caracter de esta linea es un backslash \\'
    'Hola \n'   # Hola seguido por un backslash seguido por una n
    'Hola 
    Mundo '     # Hola, salto de linea, mundo (11 caracteres en total) 
    '\'\\'      # Comilla simple seguida por un backslash. 
=end programlisting

Note que \n dentro de comillas simples no es interpretado como un salto de
linea. 

=head2 Cadenas en comillas dobles

Z<Cadenas en comillas dobles> 

De igual manera, es una cadena de caracteres, solo que en comillas dobles, y
ahora la barra invertida tiene el poder especial de especificar caracteres de
control, o cualquier caracteres a través de representaciones octales y
hexadecimales. Estas son algunas de las cadenas entre comillas dobles: 

=begin programlisting

    "larry"         # es lo mismo que 'larry'
    "hello world\n" # hello world y un salto de linea
    "El ultimo caracter de esta linea es una comilla doble: \""
    "Cafe \t coca"  # Cafe,  tabulador,  coca.

=end programlisting

Puede ver una tabla de las secuencias de escape disponibles en Perl, en el
manual B<perlrebackslash>

=begin screen

    $ perldoc perlrebackslash

=end screen

Otra caracteristica interesante de las cadenas de caracteres en doble comillas
es la interpolación. 

=head2 Operadores de cadenas de caracteres    

Z<Operadores de cadenas de caracteres> 

Los valores de cadenas se pueden concatenar con el operador B<.>, esto no
altera la cadena,  simplemente la concatena,  así que el resultado es una
cadena mas, disponible para una operación o asignar a una variable. Ejemplo: 

=begin programlisting

    "Hello" . "World"           # HelloWorld
    "Hello" . ' ' . "World"     # Hello World
    "Hello World" .  "\n"       # Hello World\n

=end programlisting

Un operador especial de cadenas,  es el operador de repetición, que consiste en
la letra minúscula x. Este operador toma a su operando de la izquierda (una
cadena) y hace tantas copias concatenadas de la misma como indica su operando
de la izquierda (un número). Ejemplo: 

=begin programlisting

    "perl"x3        # es perlperlperl
    "perl"x(3+5)    # es perlperlperlperlperlperlperlperl
    5x4             # es 5555

=end programlisting

=head2 Conversión automática entre números y cadenas

Z<Conversión automática entre números y cadenas> 

En su mayor parte,  Perl convierte entre números y cadenas según sea
necesario. ¿ Como saber que necesita ? todo depende del operador que este
usando en el valor escalar. Si el operador espera un número (como el operador
+), Perl va a ver el valor como un número. Si el operador espera una cadena
(como . o x) entonces Perl va a ver el valor como una cadena. Así que no tiene
que preocuparse por la diferencia entre los números y las cadenas, solo tiene
que preocuparse por los operadores adecuados y perl hará todo el trabajo.
Ejemplos: 

=begin programlisting

    "12" * 3        # es 36
    "Z" . 5 * 7     # es Z35

=end programlisting


=head1 Warnings o Advertencias    

Z<Warnings o Advertencias> 

Perl puede avisarle cuando vea algo sospechoso en su programa. Para correr un
programa con las advertencias activadas debe usar la opción B<-w> en la linea 
de comandos.

=begin screen

    $ perl -w mi_programa.pl

=end screen

Si prefiere tener siempre activadas las advertencias, entonces puede indicarlo
en la linea #!

=begin programlisting

    #!/usr/bin/perl -w

=end programlisting

A partir de Perl 5.6 en adelante,  puedes activar las advertencias a través del
pargma B<warnings>

=begin programlisting

    #!/usr/bin/perl
    use warnings; 

=end programlisting

Ahora,  Perl va a advertirle cuando use '12perl42' como si se tratara de un
número.

=begin screen

    Argument "12perl42" isn't numeric

=end screen

Por su puesto, las advertencias son para los programadores, no para los
usuarios finales. Si las advertencias no van a ser vistas por un programador,
pues probablemente sean inútiles. 

Las advertencias no van a cambiar el funcionamiento de su programa,  salvo que
ahora Perl se queja de vez en cuando. Si recibe un mensaje que no entiende, se
puede conseguir una mayor descripción con el pragma B<diagnostics>. La página
del manual B<perldiag> contiene los tipos de advertencias. 

=begin programlisting

    #!/usr/bin/perl 
    use diagnostics;

=end programlisting

=head1 Variables Escalares    

Z<Variables Escalares> 

Una variable es un nombre para un contenedor que posee uno o mas valores. El
nombre de la variable va a ser el mismo durante la ejecución del programa, pero
el contenido puede variar durante la ejecución del mismo. 

Una variable escalar, almacena un valor escalar simple. El nombre de una
variable escalar comienza con el signo dolar ($)N<Esto es llamado sígil en
lengua Perl> seguido por algo que vamos a
llamar identificador Perl: una letra o un guion bajo, y luego posiblemente, mas
letras o dígitos o guiones bajos. Otra forma de verlo,  es que esta formado por
caracteres alfanuméricos y guiones, pero no puede comenzar con un dígito. Se
distingue entre mayúsculas y minúsculas, la variable $perl es distinta de la
variable $Perl y $PERL. Y todas las letras, signos y guiones bajos son
significativos. Por lo que: 

=begin programlisting

    $una_variable_muy_muy_larga_que_termina_en_1

=end programlisting

Es diferente a 

=begin programlisting

    $una_variable_muy_muy_larga_que_termina_en_2 

=end programlisting

Las variables escalares pueden ser referenciadas usando un & luego del sígil
$, con lo que quedaría $&. 


=head2 Colocando nombres adecuados a las variables    

Z<Colocando nombres adecuados a las variables> 

Los nombres cortos en las variables, son útiles cuando la vida de la variable
es de apenas 3 o 4 lineas, pero cuando la variable va a tener vida durante todo
el programa o la función, vale la pena colocar un nombre que describa
fácilmente el contenido de la variable. 

Del mismo modo,  el uso de guion abajo, puede ser útil para separa las
palabras, esto hace un nombre de variable fácil de leer y entender, sobre todo
si se trabaja con programadores cuya lengua materna es diferente a la suya. 

La mayoria de las variables en Perl van a estar escritas en minúsculas, las
variables en donde todas las letras son mayúsculas, normalmente son variables
especiales como $ARGV. 

Cuando el nombre de la variable tiene mas de una palabra, alguna gente
prefiere usar guiones bajos (como $esta_es_una_variable) y otros prefieren usar
$estaEsUnaVariable. Solo sea consistente. 

=head2 Asignación de variables escalares    

Z<Asignación de variables escalares> 

La operación mas common en las variables escalares es la asignación, pues es la
forma de darle valor a una variable. El operador de asignación en Perl es el
signo igual (=), el nombre de la variable va a la izquierda y el valor de la
variable a la derecha. Ejemplos: 

=begin programlisting

    $perl       = 17; 
    $prueba     = 'hola';
    $prueba     = $perl + 3;
    $prueba     = $prueba * 2;
    

=end programlisting

=head2 Operadores de asignación binarios    

Z<Operadores de asignación binarios> 

Expresiones como $perl = $perl + 5, aparecen frecuentemente en el código, como
una manera rápida de alterar el valor de la variable. Hay una manera mas corta
de hacer esto,  usando el operador de asignación binario. Casi todos los
operadores binarios que computan un valor, tienen un operador de asignación
binario. Ejempo, las siguientes dos lineas son equivalentes: 

=begin programlisting

    $perl = $perl + 5;      #sin el operador de asignación binario
    $perl += 5;             #con el operador de asignación binario

=end programlisting

Tambien es equivalente: 

=begin programlisting

    $perl = $perl * 5;
    $perl *= 5;

=end programlisting

Para cada caso, los operadores alteran el valor correspondiente de la
variable, colocando el valor resultante de la operación. 

Otro operador de asignación común biene dado por el operador de concatenación de cadenas (.) con lo que obtenemos el operador (.=)

=begin programlisting

    $str = $str . " ";
    $str .= " ";

=end programlisting

Casi todos los operadores binarios son válidos, por ejemplo puede usar el
operador binario de potencia de la siguiente manera: 

=begin programlisting

    $numero **= 3;

=end programlisting


=head1 Salida con Print    

Z<Salida con Print> 

Es una buena idea que sus programas produzcan algún tipo de salidas por 
pantalla, de lo contrario, la gente pensara que el programa no esta haciendo
nada. 

El operador Print() hace esto posible, este toma un argumento escalar y lo pone
sin embellesimiento en la salida estandar. Ejemplo: 

=begin programlisting

    print "hello world\n";      # imprime hello world y un salto de linea.
    print "Y la respuesta es: ";
    print 6.  * 7;
    print "\n"; 

=end programlisting

Tambien puedes imprimir una serie de valores separados por comas: 

=begin programlisting

    print "The answer is ", 6 * 7, ".\n";

=end programlisting

Esto en realidad es una lista, pero aun no hemos visto listas. 

=head2 Interpolación de variables escalares en cadenas

Z<Interpolación de variables escalares en cadenas> 

Cuando un literal de cadena esta entre comillas dobles se puede usar
interpolación. Esto significa que cada nombre de variable escalar en la cadena
va a ser remplazado con su valor correspondiente. Por ejemplo: 

=begin programlisting

    $mpp = "Ministerio del poder popular para"; 
    $ministerio = "$mpp Energía Eléctrica";

    $ministerio = $mpp . ' Energía Eléctrica'; # Otra manera de hacelo

=end programlisting

Como pude ver en la ultima linea, puede hacer lo mismo sin usar las dobles
comillas, pero usar las dobles comillas es la manera mas conveniente de
hacerlo.

No use la interpolación si tiene solo una variable. Por ejemplo: 

=begin programlisting

    print "$perl";      # Comillas innecesarias. 
    print $perl;        # Esto esta mejor.

=end programlisting

Para colocar un signo de dolar en una cadena entre dobles comillas, anteponga
una barra invertida al signo de dolar, esto apaga el significado especial del
sigil ($). 

=begin programlisting

    $fred = 'hello';
    print "The name is \$fred.\n";      #imprime el signo $

    print 'The name is $fred' . "\n";   #Otra forma de hacerlo. 

=end programlisting

Si usted quisiera usar una variable seguida por una constante de texto, puede
tener problemas con la interpolación, en ese caso puede hacer lo siguiente:
Envolver el nombre de la variable entre llaves.

=begin programlisting

    $what = "brontosaurus steak";
    $n = 3;
    print "fred ate $n $whats.\n";                  #Esto no funciona
    print "fred ate $n ${what}s.\n"                 #Esto si funciona 
    print "fred ate $n $what" . "s.\n"              #Otra manera de hacerlo

    #Otra manera especialmente dificil de hacerlo 
    print 'fred ate ' . $n . ' ' . $what . "s.\n"; 

=end programlisting

=head2 Precedencia de los operadores y asociatividad    

Z<Precedencia de los operadores y asociatividad> 

La prioridad en un operador determina que operaciones en un grupo complejo de
operaciones ocurre primero. Por ejemplo en la expresión 2+3*4 ¿ que ocurre
primero, la suma o la multiplicación ?. Si ocurre primero la suma tendremos
5*4 o 20. Pero si ocurre primero la multiplicación (como lo aprendimos en
clases de matemáticas ) entonces tendremos 2 + 12 o 14. Afortunadamente, Perl
escoge la definición matemática, realizando la multiplicación primero. Debido a
esto decimos: B<La multiplicación tiene una C<Mayor prioridad> que la suma>. 

Usted puede alterar el orden de prioridades usando los paréntesis. Cualquier
cosa entre paréntesis es computado antes que los operadores fuera del
paréntesis (justo como también lo aprendimos en clases de matemáticas).
Entonces si usted quiere realizar una suma antes de una multiplicación tendría
que hacer lo siguiente: 

=begin programlisting

    (2+3) * 4;

=end programlisting

Mientras la precedencia es simple para la adición y la multiplicación, puedes
tener problemas cuando tengas una concatenación comparada con una potencia. La
manera correcta de resolverlo es consultar la tabla oficial de operadores que
se encuentra en el manual B<perlop>.

=begin screen

    $ perldoc perlop

=end screen

Normalmente las expresiones en Perl se evalúan de izquierda a derecha, aunque 
hay algunas excepciones que es necesario tener en cuenta. No se evalúan de 
izquierda a derecha los operadores de asignación y el operador de selección. 
Cuando una expresión tiene diversas posibilidades se aplica el orden de 
precedencia para establecer el calículo a realizar.

=head2 Operadores de Comparación    

Z<Operadores de Comparación> 

Para comparar números, Perl utiliza los operadores de comparación lógica que 
aprendimos en algebra: < <= == >= > !=. Cada uno de ellos retorna verdadero o
falso. Debe usar >= en lugar de =>,  ya que este ultimo es usado para otro
propósito en Perl. 

Para comparar cadenas de caracteres, Perl posee un grupo de operadores
equivalentes de comparación de cadenas: B<lt le eq ge gt ne>. Estos operadores
comparan dos cadenas de caracteres carácter por carácter para ver si son la
misma cosa o quien viene primero en el orden estándar de cadenas (En ASCII las
mayúsculas van primero que las minúsculas.)


=head3 Operadores de comparación numérica    

Z<Operadores de comparación numérica> 

=over 

=item ==  equality

=item !=  inequality

=item <   less than

=item >   greater than

=item <=  less than or equal

=item >=  greater than or equal

=back


=head3 Operadores de comparación de cadenas    

Z<Operadores de comparación de cadenas> 

=over

=item eq  equality

=item ne  inequality

=item lt  less than

=item gt  greater than

=item le  less than or equal

=item ge  greater than or equal

=back

Aquí tenemos un ejemplo usando operadores de comparación: 

=begin programlisting

   35   !=  30 + 5      # false 
   35   ==  35.0        # true
   '35' eq '35.0        # false (comparación de cadenas)
   'fred' lt 'barney'   # false
   'fred' lt 'free'     # true

=end programlisting


=head1 La estructura de control IF    

Z<La estructura de control IF> 

Una ves que comparas dos valores,  probablemente quieras tomar una
decisión basada en esa comparación. Como otros lenguajes similares,  Perl tiene
una estructura de control: 

=begin programlisting

    if ($nombre gt 'linus'){
        print "'$nombre' viene despues de 'linus' en orden de cadenas\n";
    }

=end programlisting

Si requiere una opción alternativa, la palabra reservada B<else> puede servirle
para esto:

=begin programlisting

    if ($nombre gt 'linus')
        print "'$nombre' viene despues de 'linus' en orden de cadenas\n";
    } else {
        print "'$nombre' no viene despues de 'linus'\n";
        print "Es posible que sean la misma cadena\n";
    }

=end programlisting

=head3 La verdad y la mentira en Perl    

Z<La verdad y la mentira en Perl> 

El número 0, las cadenas B<'0'> y B<''>, la lista vacía B<()>, y el valor
B<undef> son todos falsos en el contexto booleano. Cualquier otro valor es
verdadero. La negación de un valor verdadero por los operadores B<!> o B<not>
retornan un valor falso especial. Cuando se evalúa como una cadena, este valor
es tratado como B<''>, pero en el contexto numérico, es tratado como 0.  

Puedes almacenar valores verdaderos y falsos de dos maneras, utilizando
escalares, correspondientes a los dos contextos escalares. El contexto numérico
y el contexto de cadena. Hay una cosa que debemos recordar: en el contexto
numérico - 0 es falso y cualquier otro valor es verdadero; y en el contexto de
cadenas, la cadena vacía '' es falsa y cualquier otro valor (incluyendo valores negativos) es verdadero.

El hecho de que cualquier valor distinto de cero es verdadero es especialmente
útil en construcciones tales como bucles. Por ejemplo, este valor mantiene este
bucle while pasando por <> y siempre retorna algo, incluso si el usuario 
introduce una línea vacía (en este caso, <> retorna un carácter de nueva linea):

=begin programlisting

    while (<>) {
        print;
    }

=end programlisting

Los programadores a menudo se basan en el hecho de que cualquier cadena
diferente de B<cero (0)> o de B<vació ('')> es verdadera. Se puede encontrar
esto muy frecuentemente en el código, por ejemplo, verifico el valor a dividir
para así evitar la división por cero. 

=begin programlisting

    if ($bt){
        $result - $top / $buttom; 
    } else {
        $result = 0;
    }

=end programlisting

Un punto para tomar en cuenta, sin embargo, es no probar contra valores falsos
cuando se esta evaluando el valor B<undef>. Algunas funciones retornan B<undef>
cuando no hay mas datos que leer, para evaluar esto, podemos usar la función
B<defined>. Por ejemplo: 

Sin hacer uso de la función defined: 

=begin programlisting

    print "Se obtuvo un valor" if ($value = returnvalue($index)); 

=end programlisting

Usando la función defined: 

=begin programlisting
    
    print "Se obtuvo un valor" if defined($value = returnvalue($index)); 

=end programlisting


=head1 Leer valores de la entrada estándar    

Z<Leer valores de la entrada estándar> 

En este punto, se debe estar preguntando como obtener valores del teclado en un
programa en Perl. Aquí vamos a ver una forma simple de hacer esto: usando el
operador line-input B<< STDIN >>

Cada vez que usa STDIN en un lugar en el que un valor escalar es esperado, Perl
lee la siguiente linea completa de la entrada estándar, hasta la próxima nueva
linea. Ejemplo:

=begin programlisting

    $line = <STDIN>;
    if ($line eq "\n"){
        print "Esto es una linea en blanco !";
    } else {
        print "La linea de entrada fue: $line"; 
    }

=end programlisting


=head2 El operador chomp    

Z<El operador chomp> 

El operador chomp sirve para quitar el retorno de carro que viene con la linea
de texto leída desde la entrada estándar. Ejemplo 

=begin programlisting

    $text = "una linea de texto \n"; # suponiendo que viene de <STDIN>
    chomp($text); # Quita el caracter de nueva linea.

    chomp($text = <STDIN>);     # Otra forma de hacerlo.

=end programlisting


=head1 La estructura de control while    

Z<La estructura de control while> 

Al igual que otros lenguajes, Perl posee un número de estructuras de bucle. El
bucle while repite un bloque de codigo mientras la condición sea verdadera: 

=begin programlisting

    $count = 0; 
    while ($count < 10){
        $count += 2;
        print "count is now $count\n"; # obtiene los valores 2 4 6 8 10
    }

=end programlisting

=head1 El valor undef    


Z<El valor undef> 

El valor definido B<undef> se puede utilizar para identificar determinadas 
condiciones de error y la existencia o no de información de matrices o
variables hash. El valor undef se utiliza normalmente como valor de retorno de
una función que, de otra manera, proporcionaría un valor de 0, que podría ser
autentico.  Por ejemplo, el valor de un puntero de archivos en un descriptor de
archivos 
podría ser cero, por lo tanto que la función B<tell> genera el valor B<undef> 
si el valor no se puede determinar. 

¿ Que pasaría si usted usa una variable escalar antes de darle un valor ?, pues
nada serio, y definitivamente nada fatal. Las variables tienen el valor
especial B<undef> antes de la primera asignación. 

Como B<undef> automáticamente actúa como el cero (0) cuando se usa en el
contexto numérico, es fácil hacer un acumulador numérico que inicie vacío, por
ejemplo: 

 =begin programlisting
 
    $n = 1;
    while ($n < 10){
        $sum += $n;
        $n += 2; 
    }
    print "El total fue: $sum \n"
 
 =end programlisting
 
Supongamos que usted ha decidido usar la función sysread para leer el texto de
unos archivos y pasarlo a la aplicación que esta escribiendo en Perl. Se sabe
que sysread retorna un escalar indicando cuantos bytes se están leyendo. Pero
¿que pasa al final de archivo?, ¿que clase de valor retornará sysread?, ¿porque
la función retorna un escalar, debe ser un número o un string, cierto?

Pues no, aparte de números y strings, las variables escalares pueden incluso
mantener el valor indefinido de Perl, llamado como ya dijimos anteriormente
B<undef>. Este valor es retornado por algunas funciones, y puedes comprobarlo
usando una función llamada B<defined>. Si examinas el valor B<undef>
directamente, este es interpretado como un cero (0) en un contexto numérico y
como un string vació B<""> en el contexto de cadenas de caracteres. También
puedes asignar a las variables el valor undef usando la función B<undef>. Este
ejemplo da a la variable B<$variable1> el valor 5: 

=begin programlisting

    $variable = 5;

=end programlisting

Y usando la función B<undef> sobre la variable, se puede convertir en variable
no definida. 

=begin programlisting

    $variable1 = 5;
    undef $variable1;

=end programlisting

Ahora, puedes probar si $variable1 esta definida usando la función B<defined>: 

=begin programlisting

    $variable1 = 5;
    undef $variable1;
    
    if (defined $variable1){
        print "\$variable1 esta definida. \n";
    } else {
        print "\$variable1 no esta definida \n";
    }

=end programlisting

En este caso, este código muestra el siguiente mensaje: 

=begin screen

    $variable1 no esta definida

=end screen

Varios operadores retornan undef cuando los argumentos están fuera del rango
esperado o no tienen sentido. 

Cuando se tienen activadas las advertencias en Perl, generalmente Perl advierte
sobre el uso no adecuado del valor undef, por ejemplo, si intenta copiar el
valor undef de una variable a otra, esto no va a causar ningún problema, pero
si intenta imprimir un valor undef, generalmente va a causar una advertencia. 

Resumiendo, las variables no definidas que poseen el valor B<undef>, en
contexto escalar es interpretado como cero (0) y en contexto de cadena de
caracteres es interpretado como vacío B<"">.

L<ejercicios_01>
