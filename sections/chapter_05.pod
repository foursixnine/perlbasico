=head0 Hashes

En este capítulo, usted va a ver una de las caracteristicas que hacen de Perl
uno de los mejores lenguajes del mundo de programación imperativa: Hashes N<En
los viejos tiempos, los llamabamos "arrays asociativos". Pero la comunidad de
Perl decidio por 1995 que eran muchas letras al escribirlas y muchas silabas al
pronunciarlo, entones cambiaron el nombre a "Hashes">

Aunque los Hashes son una útil y poderosa caracteristica, es probable que
hallas usado otros lenguajes poderosos durante años sin haber escuchado sobre
los Hashes. Pero usted va a usar hashes en casi todos los programas en Perl que
escriba de ahora en adelante. 

=head1 ¿ Que es un Hash ?

Un hash es una estructura de datos, no es muy diferente a un array, que puede
almacenar cualquier número de valores y obtenerlos cuando quiera. Pero en lugar
de indexar los valores por un numero,  como lo hacemos con los arrays,  vamos a
indexar los valores por un nombre. Esto significa, que los indices (a los que
vamos a llamar llaves) no son números, en lugar de esto vamos a usar cadenas
arbitrarias únicas. 

Primero que todo, las llaves son cadenas de caracteres, entonces, en lugar de
usar el numero 3 para obtener un elemento de un array, vamos a acceder al
elemento del hash llamado C<wilma>.

Estas llaves, son cadenas arbitrarias - usted puede usar cualquier expresión de
cadena para la llave de un hash. Y estas son cadenas únicas - de igualmanera
que en un array tenemos un único elemento numérico 3, aqui vamos a tener un
único elemento del hash llamado C<wilma>. 

Otra forma de pensar en un hash, es compararlo con un barril de datos, donde
cada pieza de datos tiene una etiqueta. Tu puedes llegar al barril y sacar una
etiqueta y mirar que pieza de datos contiene. Pero no va a ser el "primer"
elemento del barril. En un array, comenzamos desde el elemento 0, seguido del
elemento 1, el elemento 2 y así. Pero en un hash, no hay un orden fijo, no hay
un primer elemento. Es solo una colección de pares llave-valor.

=begin figure graphic Hashes

Z<hashes>

F<figs/hashes.png>

=end figure 

=begin figure graphic Hashes como Barril

Z<hashes>

F<figs/barril.png>

=end figure 


Las llaves y los valores son un conjunto de valores escalares ordinarios, pero
las llaves son siempre convertidas a cadenas. Entonces, si usas la expresión
numerica C<50/20> como una llave, esto se va a convertir en una cadena de tres
caracteres "2.5". 

Como es usual en Perl,"no existen los límites inecesarios", esto también aplica
a un hash, un hash puede ser de cualquier tamaño, desde un hash vacío con cero
pares llave-valor, hasta cualquier cantidad de valores con los que pueda llena
su memoria. 

Algunas implementaciones de hashes (como originalmente era en el lenguaje awk)
cuando los hashes son de gran tamaño tienden a ser lentos. Este no es el caso
en Perl, en Perl es un algoritmo eficiente, bueno y escalable. Entonces, si un
hash tiene un solo árbol de pares llave-valor, es muy rápido "buscar en el
barril" y tomar uno de esos valores. Si un hash tiene tres millones de pares
clave-valor, debe ser igual de rápido tomar un valor. No se asuste, los hashs
grandes no muerden. 

Vale la pena volver a mencionar de nuevo que las llaves de un hash son siempre
únicas, aunque los valores pueden estar duplicados. Los valores de un hash
pueden ser todos números, cadenas, valores C<undef>,  o una mezcla N<En efecto,
cualquier valor escalar, incluyendo otros typos de datos escalares.>. Pero las
llaves son simpre arbritariamente cadenas únicas. 

=head1 ¿ Porque usar un Hash ?    

Z<¿ Porque usar un Hash ?> 

Cuando usted escucha por primera vez hablar de hashes, especialmente si usted
ha vivido gran parte de su vida productiva como programador en otros lenguajes
que no poseen hashes, podría preguntarse, quien querria  una de estas 
criaturas extrañas. Pues bien, la idea general es que usted tendrá un grupo de
datos relacionado con otro grupo de datos. Por ejemplo, aquí tenemos algúnos de
los hashes que podrá encontrar en aplicaciones típicas de Perl: 

=over 

=item Nombres y Apellidos

En este caso, el primer nombre es la llave, y el apellido es el valor. Este
tipo de hash requiere, por supuesto, que los nombres sean únicos. Si tiene dos
personas con el mismo nombre, este ejemplo no va a funcionar para usted. Con
este hash, puedes buscar a cualquiera por el nombre y obtener su apellido. Si
usted busca por el nombre C<Walter>, va a obtener el valor C<Vargas>. 

=item Nombre de Host y dirección IP

Usted debe saber que cada computadora en Internet tiene un nombre de host y una
dirección IP. Esto es porque a las máquinas les gusta trabajar con números,
pero a los humanos se les hace mas fácil recordar nombres. Los nombres de hosts
son cadenas únicas, entonces pueden usarse para hacer este hash. Con este hash
puedes buscar por el nombre de host y obtener la dirección ip correspondiente. 

=item Palabras, contar el número de veces que una palabra aparece. 

La idea aquí es,  que si usted quiere saber cuantas véces aparece una palabra
en un documento dado. Puede hacer un hashs que contenga como llaves del hash a
las palabras y como valor el número de repeticiones de la palabra. 

=item Cédula y Nombre

Este es un ejemplo común, ya sabemos que los números de cédulas son cadenas
únicas, entonces podemos tener un hash que contenga como llave el número de
cédula y como valor el nombre de la persona. 

=back

=head1 Acceder al elemento de un Hash

Z<Acceder al elemento de un Hash> 

Para acceder al elemento de un hash usamos la siguiente sintáxis: 

=begin programlisting

    $hash{$alguna_llave_del_hash}

=end programlisting

Es bastante similar a la sintáxis que usamos para acceder a un array, pero en
este caso vamos a usar llaves en lugar de corchetes alrededor del subindice
(llave). N<Aquí daremos un vistazo dentro de la mente de Larry Wall: Larry
decía, vamos a usar llaves en lugar de corchetes porque estamos haciendo algo
mas sofisticado que acceder a un array, entonces debemos usar un signo de
puntuación mas sofisticado.>

Podemos asigar los valores de la siguiente manera: 

=begin programlisting

    $apellido{"fred"}       = "flintstone";
    $apellido{"barney"}     = "rubble";
    $apellido{"hugo"}       = "chavez";

=end programlisting

Con el hash anterior, podríamos usar el siguiente código para accederlo: 

=begin programlisting

    foreach $persona (qw< fred barney hugo >){
        print "He oído algo sobre $persona $apellido{$persona}.\n"; 
    }

=end programlisting

El nombre del hash es de igualmanera otro identificador de Perl (letras,
dígitos y pisos bájos, pero no puede iniciar con un número). Y son de un
espacio de nombres separado, lo que significa que no hay conexión entre la
variable C<$apellido{"walter"}>, la subrutina C<&apellido> o la variable
C<$apellido>. 


